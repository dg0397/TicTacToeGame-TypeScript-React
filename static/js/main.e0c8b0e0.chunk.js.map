{"version":3,"sources":["circle.svg","cross.svg","Cell.tsx","modules/Board/Board.tsx","modules/StartScreen/StartScreen.tsx","modules/WinnerScreen/ResetScreen.tsx","modules/PlayersMenu/PlayersMenu.tsx","modules/FormTwoPlayers/FormTwoPlayers.tsx","modules/FormSinglePlayer/FormSinglePlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellWrapper","styled","button","variants","hidden","opacity","transform","visible","Shape","motion","img","attrs","initial","Cell","value","toggle","index","cellValue","animate","src","circle","cross","onClick","BoardWrapper","div","winningConditions","Board","onGameEnd","numOfPLayers","userData","useState","Array","fill","undefined","cells","setCells","secondPlayerTurn","setSecondPlayerTurn","currentShape","xUser","filter","cell","length","winningCondition","find","condition","line","map","cellIndex","every","tie","c","winningShape","useEffect","timer","setTimeout","possiblesCellsToCheck","Boolean","randomIndexCell","Math","floor","random","console","log","i","clearTimeout","toggleCell","StartButton","StartScreen","onStart","WinnerHeading","h2","ResetButton","ResetScreen","onReset","winner","MenuContainer","border","transition","type","duration","MenuButton","PlayersMenu","setPlayers","handleClick","e","currentTarget","FormTwoPlayers","backButton","nextButton","useForm","register","onSubmit","handleSubmit","data","xUserName","oUser","oUserName","className","ref","name","id","placeholder","defaultValue","FormSinglePlayer","userName","userShape","shape","computerShape","defaultChecked","start","scale","width","height","maxWidth","maxHeigth","maxHeight","playersMenu","form1","form2","game","reset","BoardContainer","Heading","h1","App","setWinner","gameState","setGameState","numOfPlayers","setNumOfPlayers","setUserData","useCallback","winnerGame","num","currentScreen","useMemo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0c8b0e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle.bd3ce232.svg\";","export default __webpack_public_path__ + \"static/media/cross.b7a9c534.svg\";","import React, { FC, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { motion } from \"framer-motion\";\r\nimport circle from \"./circle.svg\";\r\nimport cross from \"./cross.svg\";\r\n\r\nconst CellWrapper = styled.button`\r\n  background-color: white;\r\n  border: none;\r\n  box-shadow: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n  position: relative;\r\n`;\r\n\r\nconst variants = {\r\n  hidden: {\r\n    opacity: 0.5,\r\n    transform: \"translate3d(-50%, -50%, 0) scale(0.5)\",\r\n  },\r\n  visible: {\r\n    opacity: 1,\r\n    transform: \"translate3d(-50%, -50%, 0) scale(1)\",\r\n  },\r\n};\r\nconst Shape = styled(motion.img).attrs(() => ({\r\n  initial: \"hidden\",\r\n  variants,\r\n}))`\r\n  height: 60px;\r\n  width: 60px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n`;\r\nexport type CellValue = \"X\" | \"O\" | undefined;\r\n\r\ntype CellProps = {\r\n  value: CellValue;\r\n  toggle(index: number): void;\r\n  index: number;\r\n};\r\n\r\nexport const Cell: FC<CellProps> = ({ value, toggle, index }): ReactElement => {\r\n  const cellValue =\r\n    value === \"O\" ? (\r\n      <Shape animate=\"visible\" src={circle} />\r\n    ) : value === \"X\" ? (\r\n      <Shape animate=\"visible\" src={cross} />\r\n    ) : null;\r\n  return <CellWrapper onClick={() => toggle(index)}>{cellValue}</CellWrapper>;\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Cell, CellValue } from \"../../Cell\";\r\nimport styled from \"styled-components\";\r\nimport { DataUser, NumPlayers } from \"../../App\";\r\n\r\nconst BoardWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(3, 1fr);\r\n  gap: 6px;\r\n  background-color: #999;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nexport type Winner = CellValue | \"tie\" | string;\r\n\r\ntype BoardProps = {\r\n  numOfPLayers : NumPlayers;\r\n  onGameEnd(winner: Winner): void;\r\n  userData : DataUser;\r\n};\r\n\r\n//prettier-ignore\r\nconst winningConditions = [\r\n  [0,1,2], [3,4,5], [6,7,8], //Horizontal \r\n  [0,3,6], [1,4,7], [2,5,8],//Vertical\r\n  [0,4,8], [2,4,6] //Diagonal\r\n];\r\n\r\nexport const Board: FC<BoardProps> = ({ onGameEnd,numOfPLayers,userData }) => {\r\n  const [cells, setCells] = useState<CellValue[]>(Array(9).fill(undefined));\r\n  const [secondPlayerTurn,setSecondPlayerTurn] = useState<boolean>(false)\r\n\r\n  const currentShape: CellValue = userData.xUser === 'Computer' ? \r\n    cells.filter((cell) => cell).length % 2 ? \"X\" : \"O\":\r\n    cells.filter((cell) => cell).length % 2 ? \"O\" : \"X\" ;\r\n\r\n  const winningCondition = winningConditions.find((condition) => {\r\n    const line = condition.map((cellIndex) => cells[cellIndex]);\r\n\r\n    return line[0] && line.every((cellValue) => cellValue === line[0]);\r\n  });\r\n\r\n  const tie = cells.filter((c) => c).length === 9;\r\n\r\n  const winningShape = winningCondition\r\n    ? cells[winningCondition[0]]\r\n    : undefined;\r\n\r\n  useEffect(() => {\r\n    if (winningShape) {\r\n      return onGameEnd(winningShape);\r\n    }\r\n    if (tie) {\r\n      return onGameEnd(\"tie\");\r\n    }\r\n  }, [tie, winningShape, onGameEnd]);\r\n\r\n  useEffect(()=>{\r\n    if(numOfPLayers === '1' && secondPlayerTurn){\r\n      const timer = setTimeout(() => {\r\n        const possiblesCellsToCheck = cells.map( (cell,index) => cell === undefined ? index : null ).filter(Boolean)\r\n        const randomIndexCell = Math.floor(Math.random() * possiblesCellsToCheck.length) \r\n        console.log(possiblesCellsToCheck,randomIndexCell)\r\n        setCells((cells) => \r\n          cells.map((cell,i) => {\r\n            return i !== possiblesCellsToCheck[randomIndexCell] ? cell : cell ? cell : currentShape \r\n          })\r\n        );\r\n        setSecondPlayerTurn(false)\r\n      },1000)\r\n      return () => clearTimeout(timer)\r\n    }\r\n  },[numOfPLayers,secondPlayerTurn,cells,currentShape])\r\n\r\n  const toggleCell = (index: number) => {\r\n    setCells((cells) =>\r\n      cells.map((cell, i) => {\r\n        return i !== index ? cell : cell ? cell : currentShape;\r\n      })\r\n    );\r\n    setSecondPlayerTurn(true)\r\n  };\r\n\r\n  return (\r\n    <BoardWrapper>\r\n      {cells.map((cell, index: number) => {\r\n        return (\r\n          <Cell key={index} value={cell} index={index} toggle={toggleCell} />\r\n        );\r\n      })}\r\n    </BoardWrapper>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StartButton = styled.button`\r\n  border: none;\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n`;\r\n\r\ntype StartScreenProps = {\r\n  onStart(): void;\r\n};\r\n\r\nexport const StartScreen: FC<StartScreenProps> = ({ onStart }) => {\r\n  return <StartButton onClick={onStart}>Start</StartButton>;\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Winner } from \"../Board/Board\";\r\n\r\ntype ResetScreenProps = {\r\n  onReset(): void;\r\n  winner: Winner;\r\n};\r\n\r\nconst WinnerHeading = styled.h2`\r\n  color: #333;\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst ResetButton = styled.button`\r\n  border: none;\r\n  font-size: 1.5rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n`;\r\n\r\nexport const ResetScreen: FC<ResetScreenProps> = ({ onReset, winner}) => {\r\n  return (\r\n    <>\r\n      <WinnerHeading>\r\n        {winner !== \"tie\" ? `The Winner is ${winner}` : `It's a tie`}\r\n      </WinnerHeading>\r\n      <ResetButton onClick={onReset}>Reset Game</ResetButton>\r\n    </>\r\n  );\r\n};\r\n","import React, { FC } from 'react'\r\nimport styled from 'styled-components';\r\nimport { NumPlayers } from '../../App'\r\nimport { motion } from \"framer-motion\";\r\n\r\n\r\ntype PlayersMenuProps = {\r\n    setPlayers(num: NumPlayers): void;\r\n}\r\n\r\nconst MenuContainer = styled.div`\r\n    display : flex;\r\n    flex-direction:column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst variants = {\r\n    hidden: {\r\n      opacity: 0,\r\n      transform: \"translate3d(-50%, -50%, 0) scale(0.5)\",\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      transform: \"translate3d(0%, 0%, 0) scale(1)\",\r\n      border: \"1px solid #1c1c1c\",\r\n      transition: {\r\n        type: \"spring\",\r\n        duration: \"0.5\",\r\n      },\r\n    },\r\n  };\r\n  \r\n  const MenuButton = styled(motion.button).attrs(() => ({\r\n    initial: \"hidden\",\r\n    variants,\r\n  }))`\r\n    margin-bottom:1rem;\r\n    padding:.5rem;\r\n    border-radius:5px;\r\n    font-size: 2rem;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    color: #333;\r\n    background: none;\r\n    transition: all .5s ease;\r\n    top: 50%;\r\n    left: 50%;\r\n    &:hover{\r\n        background-color: rgba(0,0,0,.2)\r\n    }\r\n  `;\r\n\r\nexport const PlayersMenu: FC<PlayersMenuProps> = ({setPlayers}) => {\r\n    const handleClick = (e:React.MouseEvent<HTMLButtonElement>) => {\r\n        const value:any= e.currentTarget.value;\r\n        setPlayers(value)\r\n    }\r\n    return (\r\n        <MenuContainer>\r\n            <MenuButton onClick = {handleClick} value = '1' animate=\"visible\">One Player</MenuButton>\r\n            <MenuButton onClick = {handleClick} value = '2' animate=\"visible\">Two Players</MenuButton>\r\n        </MenuContainer>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {useForm} from 'react-hook-form';\r\n\r\ntype FormData = {\r\n    xUserName: string;\r\n    oUserName: string;\r\n};\r\n\r\nexport type FormProps = {\r\n    backButton():void;\r\n    nextButton(data: any):void\r\n}\r\n\r\n\r\nexport const FormTwoPlayers:FC<FormProps> = ({backButton,nextButton}) => {\r\n    const {register, handleSubmit} = useForm<FormData>();\r\n\r\n    const onSubmit = handleSubmit(({xUserName,oUserName}) => {\r\n        const data = {\r\n            xUser: xUserName,\r\n            oUser: oUserName\r\n        }\r\n        nextButton({...data})\r\n    });\r\n\r\n    return (\r\n        <form onSubmit = {onSubmit} className = 'Form'>\r\n            <label>\r\n                Who want to be X(default value is X)\r\n                <input ref = {register} type=\"text\" name=\"xUserName\" id=\"xUserName\" placeholder = \"Enter your Name\" defaultValue = 'X' />\r\n            </label>\r\n            <label>\r\n                Who want to be O(default value is O)\r\n                <input ref = {register} type=\"text\" name=\"oUserName\" id=\"oUserName\" placeholder = \"Enter your Name\" defaultValue = 'O' />\r\n            </label>\r\n            <input type=\"button\" value=\"Back\" onClick = {backButton}/>\r\n            <input type=\"submit\" value=\"Next\"/>\r\n        </form>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {useForm} from 'react-hook-form';\r\nimport { FormProps } from '../FormTwoPlayers/FormTwoPlayers';\r\n\r\ntype FormData = {\r\n    userShape: \"X\" | 'O' ;\r\n    userName: string;\r\n};\r\n\r\n\r\nexport const FormSinglePlayer:FC<FormProps> = ({backButton,nextButton}) => {\r\n    const {register, handleSubmit} = useForm<FormData>()\r\n\r\n    const onSubmit = handleSubmit(({userName,userShape})  => {\r\n        const shape = userShape === \"X\" ? 'xUser' : 'oUser';\r\n        const computerShape = shape === 'xUser' ? \"oUser\" : 'xUser'; \r\n        const name = userName ? userName : userShape;\r\n        const data = {\r\n            [shape]: name,\r\n            [computerShape] : 'Computer'\r\n        }\r\n        nextButton({...data})\r\n    });\r\n\r\n    return (\r\n        <form onSubmit = {onSubmit} className = 'Form'>\r\n            <label>\r\n                Enter your Name(default value is the value that you choice X or O)\r\n                <input ref = {register} type=\"text\" name=\"userName\" id=\"user-name\" placeholder = \"Enter your Name\"/>\r\n            </label>\r\n            <p>Do you want to be X or O</p>\r\n            <label>\r\n                X\r\n                <input ref = {register} type=\"radio\" name=\"userShape\" id=\"x-user\" value = 'X' defaultChecked/>\r\n            </label>\r\n            <label>\r\n                O\r\n                <input ref = {register} type=\"radio\" name=\"userShape\" id=\"o-user\" value = \"O\"/>\r\n            </label>\r\n            <input type=\"button\" value=\"Back\" onClick = {backButton}/>\r\n            <input type=\"submit\" value=\"Next\"/>\r\n        </form>\r\n    )\r\n}","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport { Board, Winner } from \"./modules/Board/Board\";\r\nimport styled from \"styled-components\";\r\nimport { StartScreen } from \"./modules/StartScreen/StartScreen\";\r\nimport { ResetScreen } from \"./modules/WinnerScreen/ResetScreen\";\r\nimport { PlayersMenu } from './modules/PlayersMenu/PlayersMenu';\r\nimport { FormTwoPlayers } from \"./modules/FormTwoPlayers/FormTwoPlayers\";\r\nimport { FormSinglePlayer } from \"./modules/FormSinglePlayer/FormSinglePlayer\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst variants = {\r\n  start: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"200px\",\r\n    height: \"100px\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n  hidden: {\r\n    opacity: 0,\r\n    scale: 0.8,\r\n    maxWidth: \"500px\",\r\n    maxHeight: \"500px\",\r\n  },\r\n  playersMenu: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"60%\",\r\n    height: \"200px\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    }\r\n  },\r\n  form1: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"60%\",\r\n    height: \"auto\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    }\r\n  },\r\n  form2: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"60%\",\r\n    height: \"auto\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    }\r\n  },\r\n  game: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"80vw\",\r\n    height: \"80vw\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n  reset: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"300px\",\r\n    height: \"200px\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n};\r\n\r\nconst BoardContainer = styled(motion.div).attrs(() => ({\r\n  initial: \"hidden\",\r\n  variants,\r\n}))`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  background-color: white;\r\n  border-radius: 16px;\r\n  box-shadow: -6px 10px 30px 4px rgba(0, 0, 0, 0.3);\r\n  border: 15px solid white;\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  color: white;\r\n  text-align: center;\r\n  margin-bottom: 1rem;\r\n  text-shadow: -3px 3px #00000066;\r\n`;\r\ntype GameState =\r\n  | \"start\"\r\n  | \"playersMenu\"\r\n  | \"form1\"\r\n  | \"form2\"\r\n  | \"game\"\r\n  | \"reset\";\r\n\r\nexport type NumPlayers = \"1\" | \"2\" | undefined;\r\n\r\nexport type DataUser = {\r\n  xUser?: string | undefined;\r\n  oUser?: string | undefined;\r\n}\r\n\r\nfunction App() {\r\n  const [winner, setWinner] = useState<Winner>();\r\n  const [gameState, setGameState] = useState<GameState>(\"start\");\r\n  const [numOfPlayers,setNumOfPlayers] = useState<NumPlayers>()\r\n  const [userData,setUserData] = useState<Partial<DataUser>>({});\r\n\r\n  const onGameEnd = useCallback((winner: Winner) => {\r\n    const winnerGame = winner === 'X'? userData.xUser :  winner === 'O'?  userData.oUser : \"tie\"\r\n    setWinner(winnerGame);\r\n    setGameState(\"reset\");\r\n    },[userData.oUser,userData.xUser],\r\n  );\r\n\r\n  const onReset = () => {\r\n    setWinner(undefined);\r\n    setGameState(\"game\");\r\n  };\r\n\r\n  const setPlayers = (num : NumPlayers) => {\r\n    if(num === \"1\"){\r\n      setNumOfPlayers(num);\r\n      setGameState(\"form1\");\r\n    }else if( num === \"2\"){\r\n      setNumOfPlayers(num);\r\n      setGameState(\"form2\");\r\n    }\r\n  };\r\n\r\n  const backButton = useCallback(()=> {\r\n    setGameState('playersMenu');\r\n    },[],\r\n  );\r\n  const nextButton = useCallback((data:Partial<DataUser>)=>{\r\n    setGameState('game')\r\n    setUserData(data)\r\n    },[]\r\n  );\r\n\r\n  const screens = useMemo(() => ({\r\n    start: <StartScreen onStart={() => setGameState(\"playersMenu\")} />,\r\n    playersMenu: <PlayersMenu setPlayers = {setPlayers}/>,\r\n    form1: <FormSinglePlayer backButton = {backButton} nextButton = {nextButton}/>,\r\n    form2: <FormTwoPlayers backButton = {backButton} nextButton = {nextButton}/>,\r\n    game: <Board onGameEnd={onGameEnd} numOfPLayers = {numOfPlayers} userData = {userData}/>,\r\n    reset: <ResetScreen winner={winner} onReset={onReset} />,\r\n  }),[winner,numOfPlayers,backButton,nextButton,onGameEnd,userData]);\r\n\r\n  const currentScreen = screens[gameState];\r\n  return (\r\n    <>\r\n      <Heading>TypeScript Tic-Tac-Toe</Heading>\r\n      <BoardContainer animate={gameState}>{currentScreen}</BoardContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}