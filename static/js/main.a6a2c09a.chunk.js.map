{"version":3,"sources":["circle.svg","cross.svg","Cell.tsx","modules/Board/Board.tsx","modules/StartScreen/StartScreen.tsx","modules/WinnerScreen/ResetScreen.tsx","modules/PlayersMenu/PlayersMenu.tsx","modules/FormSinglePlayer/FormSinglePlayer.tsx","modules/FormTwoPlayers/FormTwoPlayers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellWrapper","styled","button","variants","hidden","opacity","transform","visible","Shape","motion","img","attrs","initial","Cell","value","toggle","index","cellValue","animate","src","circle","cross","onClick","BoardWrapper","div","winningConditions","Board","onGameEnd","numOfPLayers","userData","useState","Array","fill","undefined","cells","setCells","secondPlayerTurn","setSecondPlayerTurn","currentShape","filter","cell","length","winningCondition","find","condition","line","map","cellIndex","every","tie","c","winningShape","useEffect","timer","setTimeout","possiblesCellsToCheck","Boolean","randomIndexCell","Math","floor","random","console","log","i","clearTimeout","xUser","toggleCell","StartButton","StartScreen","onStart","WinnerHeading","h2","ResetButton","ResetScreen","onReset","winner","MenuContainer","border","transition","type","duration","MenuButton","PlayersMenu","setPlayers","handleClick","e","currentTarget","FormComponent","form","LabelComponent","label","InputElement","input","props","LabelShape","span","DirectionButton","ButtonsContainer","ChecksContainer","FormSinglePlayer","backButton","nextButton","useForm","register","onSubmit","handleSubmit","userName","userShape","shape","computerShape","name","data","className","ref","id","placeholder","defaultChecked","FormTwoPlayers","xUserName","oUser","oUserName","defaultValue","start","scale","width","height","maxWidth","maxHeigth","maxHeight","playersMenu","form1","form2","game","reset","BoardContainer","Heading","h1","App","setWinner","gameState","setGameState","numOfPlayers","setNumOfPlayers","setUserData","useCallback","winnerGame","num","currentScreen","useMemo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6a2c09a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle.bd3ce232.svg\";","export default __webpack_public_path__ + \"static/media/cross.b7a9c534.svg\";","import React, { FC, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { motion } from \"framer-motion\";\r\nimport circle from \"./circle.svg\";\r\nimport cross from \"./cross.svg\";\r\n\r\nconst CellWrapper = styled.button`\r\n  background-color: white;\r\n  border: none;\r\n  box-shadow: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n  position: relative;\r\n`;\r\n\r\nconst variants = {\r\n  hidden: {\r\n    opacity: 0.5,\r\n    transform: \"translate3d(-50%, -50%, 0) scale(0.5)\",\r\n  },\r\n  visible: {\r\n    opacity: 1,\r\n    transform: \"translate3d(-50%, -50%, 0) scale(1)\",\r\n  },\r\n};\r\nconst Shape = styled(motion.img).attrs(() => ({\r\n  initial: \"hidden\",\r\n  variants,\r\n}))`\r\n  height: 60px;\r\n  width: 60px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n`;\r\nexport type CellValue = \"X\" | \"O\" | undefined;\r\n\r\ntype CellProps = {\r\n  value: CellValue;\r\n  toggle(index: number): void;\r\n  index: number;\r\n};\r\n\r\nexport const Cell: FC<CellProps> = ({ value, toggle, index }): ReactElement => {\r\n  const cellValue =\r\n    value === \"O\" ? (\r\n      <Shape animate=\"visible\" src={circle} />\r\n    ) : value === \"X\" ? (\r\n      <Shape animate=\"visible\" src={cross} />\r\n    ) : null;\r\n  return <CellWrapper onClick={() => toggle(index)}>{cellValue}</CellWrapper>;\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Cell, CellValue } from \"../../Cell\";\r\nimport styled from \"styled-components\";\r\nimport { DataUser, NumPlayers } from \"../../App\";\r\n\r\nconst BoardWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(3, 1fr);\r\n  gap: 6px;\r\n  background-color: #999;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nexport type Winner = CellValue | \"tie\" | string;\r\n\r\ntype BoardProps = {\r\n  numOfPLayers: NumPlayers;\r\n  onGameEnd(winner: Winner): void;\r\n  userData: DataUser;\r\n};\r\n\r\n//prettier-ignore\r\nconst winningConditions = [\r\n  [0,1,2], [3,4,5], [6,7,8], //Horizontal \r\n  [0,3,6], [1,4,7], [2,5,8],//Vertical\r\n  [0,4,8], [2,4,6] //Diagonal\r\n];\r\n\r\nexport const Board: FC<BoardProps> = ({\r\n  onGameEnd,\r\n  numOfPLayers,\r\n  userData,\r\n}) => {\r\n  const [cells, setCells] = useState<CellValue[]>(Array(9).fill(undefined));\r\n  const [secondPlayerTurn, setSecondPlayerTurn] = useState<boolean>(false);\r\n\r\n  const currentShape: CellValue =\r\n    cells.filter((cell) => cell).length % 2 ? \"O\" : \"X\";\r\n\r\n  const winningCondition = winningConditions.find((condition) => {\r\n    const line = condition.map((cellIndex) => cells[cellIndex]);\r\n\r\n    return line[0] && line.every((cellValue) => cellValue === line[0]);\r\n  });\r\n\r\n  const tie = cells.filter((c) => c).length === 9;\r\n\r\n  const winningShape = winningCondition\r\n    ? cells[winningCondition[0]]\r\n    : undefined;\r\n\r\n  useEffect(() => {\r\n    if (winningShape) {\r\n      return onGameEnd(winningShape);\r\n    }\r\n    if (tie) {\r\n      return onGameEnd(\"tie\");\r\n    }\r\n  }, [tie, winningShape, onGameEnd]);\r\n\r\n  useEffect(() => {\r\n    if (numOfPLayers === \"1\" && secondPlayerTurn) {\r\n      const timer = setTimeout(() => {\r\n        const possiblesCellsToCheck = cells\r\n          .map((cell, index) => (cell === undefined ? index : null))\r\n          .filter(Boolean);\r\n        const randomIndexCell = Math.floor(\r\n          Math.random() * possiblesCellsToCheck.length\r\n        );\r\n        console.log(possiblesCellsToCheck, randomIndexCell);\r\n        setCells((cells) =>\r\n          cells.map((cell, i) => {\r\n            return i !== possiblesCellsToCheck[randomIndexCell]\r\n              ? cell\r\n              : cell\r\n              ? cell\r\n              : currentShape;\r\n          })\r\n        );\r\n        setSecondPlayerTurn(false);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [numOfPLayers, secondPlayerTurn, cells, currentShape]);\r\n\r\n  useEffect(() => {\r\n    if (userData.xUser === \"Computer\") {\r\n      setSecondPlayerTurn(true);\r\n    }\r\n  }, [userData.xUser]);\r\n\r\n  const toggleCell = (index: number) => {\r\n    if (secondPlayerTurn === false) {\r\n      setCells((cells) =>\r\n        cells.map((cell, i) => {\r\n          return i !== index ? cell : cell ? cell : currentShape;\r\n        })\r\n      );\r\n      setSecondPlayerTurn(true);\r\n    }else if (secondPlayerTurn === true && numOfPLayers === '2'){\r\n      setCells((cells) =>\r\n        cells.map((cell, i) => {\r\n          return i !== index ? cell : cell ? cell : currentShape;\r\n        })\r\n      );\r\n      setSecondPlayerTurn(false);\r\n    }else{\r\n      return\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BoardWrapper>\r\n      {cells.map((cell, index: number) => {\r\n        return (\r\n          <Cell key={index} value={cell} index={index} toggle={toggleCell} />\r\n        );\r\n      })}\r\n    </BoardWrapper>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StartButton = styled.button`\r\n  border: none;\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n`;\r\n\r\ntype StartScreenProps = {\r\n  onStart(): void;\r\n};\r\n\r\nexport const StartScreen: FC<StartScreenProps> = ({ onStart }) => {\r\n  return <StartButton onClick={onStart}>Start</StartButton>;\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Winner } from \"../Board/Board\";\r\n\r\ntype ResetScreenProps = {\r\n  onReset(): void;\r\n  winner: Winner;\r\n};\r\n\r\nconst WinnerHeading = styled.h2`\r\n  color: #333;\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst ResetButton = styled.button`\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  border-radius: 5px;\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n  transition: all 0.5s ease;\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nexport const ResetScreen: FC<ResetScreenProps> = ({ onReset, winner }) => {\r\n  return (\r\n    <>\r\n      <WinnerHeading>\r\n        {winner !== \"tie\" ? `The Winner is ${winner}` : `It's a tie`}\r\n      </WinnerHeading>\r\n      <ResetButton onClick={onReset}>Reset Game</ResetButton>\r\n    </>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NumPlayers } from \"../../App\";\r\nimport { motion } from \"framer-motion\";\r\n\r\ntype PlayersMenuProps = {\r\n  setPlayers(num: NumPlayers): void;\r\n};\r\n\r\nconst MenuContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst variants = {\r\n  hidden: {\r\n    opacity: 0,\r\n    transform: \"translate3d(-50%, -50%, 0) scale(0.5)\",\r\n  },\r\n  visible: {\r\n    opacity: 1,\r\n    transform: \"translate3d(0%, 0%, 0) scale(1)\",\r\n    border: \"1px solid #1c1c1c\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.25\",\r\n    },\r\n  },\r\n};\r\n\r\nconst MenuButton = styled(motion.button).attrs(() => ({\r\n  initial: \"hidden\",\r\n  variants,\r\n}))`\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  border-radius: 5px;\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n  transition: all 0.5s ease;\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nexport const PlayersMenu: FC<PlayersMenuProps> = ({ setPlayers }) => {\r\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    const value: any = e.currentTarget.value;\r\n    setPlayers(value);\r\n  };\r\n  return (\r\n    <MenuContainer>\r\n      <MenuButton onClick={handleClick} value=\"1\" animate=\"visible\">\r\n        One Player\r\n      </MenuButton>\r\n      <MenuButton onClick={handleClick} value=\"2\" animate=\"visible\">\r\n        Two Players\r\n      </MenuButton>\r\n    </MenuContainer>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FormProps } from \"../FormTwoPlayers/FormTwoPlayers\";\r\nimport styled from \"styled-components\";\r\n\r\ntype FormData = {\r\n  userShape: \"X\" | \"O\";\r\n  userName: string;\r\n};\r\n\r\nexport const FormComponent = styled.form`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  height: auto;\r\n`;\r\ntype LabelComponentProps = {\r\n  type?: \"check\" | \"text\";\r\n  statusBtn?: \"checked\" | \"unChecked\";\r\n};\r\nexport const LabelComponent = styled.label<LabelComponentProps>`\r\n  display: block;\r\n  transition: border 0.5s ease;\r\n  border-radius: 10px;\r\n`;\r\ntype InputElementProps = {\r\n  type?: \"radio\" | \"text\";\r\n};\r\nexport const InputElement = styled.input<InputElementProps>`\r\n  ${(props) => {\r\n    if (props.type === \"radio\") {\r\n      return `\r\n                display : none;\r\n                margin: 0 auto;\r\n                &:checked + span{\r\n                    border: 1px solid rgba(28, 28, 28, .5);\r\n                    background-color:rgba(28, 28, 28, .1);\r\n                }\r\n            `;\r\n    } else {\r\n      return `\r\n                display: block;\r\n                margin: .5rem auto;\r\n                height:2rem;\r\n                border:none;\r\n                border:1px solid #1c1c1c;\r\n                border-radius: 10px;\r\n                outline:none;\r\n                padding:.5rem;\r\n            `;\r\n    }\r\n  }}\r\n`;\r\nconst LabelShape = styled.span`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 0.5rem;\r\n  border-radius: 10px;\r\n  &:hover {\r\n    border: 1px solid rgba(28, 28, 28, 0.5);\r\n    background-color: rgba(28, 28, 28, 0.1);\r\n  }\r\n`;\r\n\r\nexport const DirectionButton = styled.input`\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  border-radius: 5px;\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n  transition: all 0.5s ease;\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin: 1rem auto;\r\n`;\r\nconst ChecksContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin: 0.5rem auto;\r\n`;\r\n\r\nexport const FormSinglePlayer: FC<FormProps> = ({ backButton, nextButton }) => {\r\n  const { register, handleSubmit } = useForm<FormData>();\r\n\r\n  const onSubmit = handleSubmit(({ userName, userShape }) => {\r\n    const shape = userShape === \"X\" ? \"xUser\" : \"oUser\";\r\n    const computerShape = shape === \"xUser\" ? \"oUser\" : \"xUser\";\r\n    const name = userName ? userName : userShape;\r\n    const data = {\r\n      [shape]: name,\r\n      [computerShape]: \"Computer\",\r\n    };\r\n    nextButton({ ...data });\r\n  });\r\n\r\n  return (\r\n    <FormComponent onSubmit={onSubmit} className=\"Form\">\r\n      <LabelComponent type=\"text\">\r\n        Enter your Name(default value is the value that you choice X or O)\r\n        <InputElement\r\n          ref={register}\r\n          type=\"text\"\r\n          name=\"userName\"\r\n          id=\"user-name\"\r\n          placeholder=\"Enter your Name\"\r\n        />\r\n      </LabelComponent>\r\n      <p>Do you want to be X or O</p>\r\n      <ChecksContainer>\r\n        <LabelComponent type=\"check\">\r\n          <InputElement\r\n            ref={register}\r\n            type=\"radio\"\r\n            name=\"userShape\"\r\n            id=\"x-user\"\r\n            value=\"X\"\r\n            defaultChecked\r\n          />\r\n          <LabelShape>X</LabelShape>\r\n        </LabelComponent>\r\n        <LabelComponent type=\"check\">\r\n          <InputElement\r\n            ref={register}\r\n            type=\"radio\"\r\n            name=\"userShape\"\r\n            id=\"o-user\"\r\n            value=\"O\"\r\n          />\r\n          <LabelShape>O</LabelShape>\r\n        </LabelComponent>\r\n      </ChecksContainer>\r\n      <ButtonsContainer>\r\n        <DirectionButton type=\"button\" value=\"Back\" onClick={backButton} />\r\n        <DirectionButton type=\"submit\" value=\"Next\" />\r\n      </ButtonsContainer>\r\n    </FormComponent>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n  ButtonsContainer,\r\n  DirectionButton,\r\n  FormComponent,\r\n  InputElement,\r\n  LabelComponent,\r\n} from \"../FormSinglePlayer/FormSinglePlayer\";\r\n\r\ntype FormData = {\r\n  xUserName: string;\r\n  oUserName: string;\r\n};\r\n\r\nexport type FormProps = {\r\n  backButton(): void;\r\n  nextButton(data: any): void;\r\n};\r\n\r\nexport const FormTwoPlayers: FC<FormProps> = ({ backButton, nextButton }) => {\r\n  const { register, handleSubmit } = useForm<FormData>();\r\n\r\n  const onSubmit = handleSubmit(({ xUserName, oUserName }) => {\r\n    const data = {\r\n      xUser: xUserName,\r\n      oUser: oUserName,\r\n    };\r\n    nextButton({ ...data });\r\n  });\r\n\r\n  return (\r\n    <FormComponent onSubmit={onSubmit} className=\"Form\">\r\n      <LabelComponent>\r\n        Who want to be X(default value is X)\r\n        <InputElement\r\n          ref={register}\r\n          type=\"text\"\r\n          name=\"xUserName\"\r\n          id=\"xUserName\"\r\n          placeholder=\"Enter your Name\"\r\n          defaultValue=\"X\"\r\n        />\r\n      </LabelComponent>\r\n      <LabelComponent>\r\n        Who want to be O(default value is O)\r\n        <InputElement\r\n          ref={register}\r\n          type=\"text\"\r\n          name=\"oUserName\"\r\n          id=\"oUserName\"\r\n          placeholder=\"Enter your Name\"\r\n          defaultValue=\"O\"\r\n        />\r\n      </LabelComponent>\r\n      <ButtonsContainer>\r\n        <DirectionButton type=\"button\" value=\"Back\" onClick={backButton} />\r\n        <DirectionButton type=\"submit\" value=\"Next\" />\r\n      </ButtonsContainer>\r\n    </FormComponent>\r\n  );\r\n};\r\n","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport { Board, Winner } from \"./modules/Board/Board\";\r\nimport styled from \"styled-components\";\r\nimport { StartScreen } from \"./modules/StartScreen/StartScreen\";\r\nimport { ResetScreen } from \"./modules/WinnerScreen/ResetScreen\";\r\nimport { PlayersMenu } from \"./modules/PlayersMenu/PlayersMenu\";\r\nimport { FormTwoPlayers } from \"./modules/FormTwoPlayers/FormTwoPlayers\";\r\nimport { FormSinglePlayer } from \"./modules/FormSinglePlayer/FormSinglePlayer\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst variants = {\r\n  start: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"200px\",\r\n    height: \"100px\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n  hidden: {\r\n    opacity: 0,\r\n    scale: 0.8,\r\n    maxWidth: \"500px\",\r\n    maxHeight: \"500px\",\r\n  },\r\n  playersMenu: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"70%\",\r\n    height: \"200px\",\r\n    maxWidth: \"400px\",\r\n    maxHeigth: \"400px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n  form1: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"60%\",\r\n    height: \"auto\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n  form2: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"60%\",\r\n    height: \"auto\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n  game: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"80vw\",\r\n    height: \"80vw\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n  reset: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    width: \"300px\",\r\n    height: \"200px\",\r\n    maxWidth: \"500px\",\r\n    maxHeigth: \"500px\",\r\n    transition: {\r\n      type: \"spring\",\r\n      duration: \"0.8\",\r\n    },\r\n  },\r\n};\r\n\r\nconst BoardContainer = styled(motion.div).attrs(() => ({\r\n  initial: \"hidden\",\r\n  variants,\r\n}))`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  background-color: white;\r\n  border-radius: 16px;\r\n  box-shadow: -6px 10px 30px 4px rgba(0, 0, 0, 0.3);\r\n  border: 15px solid white;\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  color: white;\r\n  text-align: center;\r\n  margin-bottom: 1rem;\r\n  text-shadow: -3px 3px #00000066;\r\n`;\r\ntype GameState = \"start\" | \"playersMenu\" | \"form1\" | \"form2\" | \"game\" | \"reset\";\r\n\r\nexport type NumPlayers = \"1\" | \"2\" | undefined;\r\n\r\nexport type DataUser = {\r\n  xUser?: string | undefined;\r\n  oUser?: string | undefined;\r\n};\r\n\r\nfunction App() {\r\n  const [winner, setWinner] = useState<Winner>();\r\n  const [gameState, setGameState] = useState<GameState>(\"start\");\r\n  const [numOfPlayers, setNumOfPlayers] = useState<NumPlayers>();\r\n  const [userData, setUserData] = useState<Partial<DataUser>>({});\r\n\r\n  const onGameEnd = useCallback(\r\n    (winner: Winner) => {\r\n      const winnerGame =\r\n        winner === \"X\"\r\n          ? userData.xUser\r\n          : winner === \"O\"\r\n          ? userData.oUser\r\n          : \"tie\";\r\n      if (winnerGame === \"Computer\") {\r\n        setTimeout(() => {\r\n          setWinner(winnerGame);\r\n          setGameState(\"reset\");\r\n        }, 500);\r\n      } else {\r\n        setWinner(winnerGame);\r\n        setGameState(\"reset\");\r\n      }\r\n    },\r\n    [userData.oUser, userData.xUser]\r\n  );\r\n\r\n  const onReset = () => {\r\n    setWinner(undefined);\r\n    setGameState(\"game\");\r\n  };\r\n\r\n  const setPlayers = (num: NumPlayers) => {\r\n    if (num === \"1\") {\r\n      setNumOfPlayers(num);\r\n      setGameState(\"form1\");\r\n    } else if (num === \"2\") {\r\n      setNumOfPlayers(num);\r\n      setGameState(\"form2\");\r\n    }\r\n  };\r\n\r\n  const backButton = useCallback(() => {\r\n    setGameState(\"playersMenu\");\r\n  }, []);\r\n  const nextButton = useCallback((data: Partial<DataUser>) => {\r\n    setGameState(\"game\");\r\n    setUserData(data);\r\n  }, []);\r\n\r\n  const screens = useMemo(\r\n    () => ({\r\n      start: <StartScreen onStart={() => setGameState(\"playersMenu\")} />,\r\n      playersMenu: <PlayersMenu setPlayers={setPlayers} />,\r\n      form1: (\r\n        <FormSinglePlayer backButton={backButton} nextButton={nextButton} />\r\n      ),\r\n      form2: <FormTwoPlayers backButton={backButton} nextButton={nextButton} />,\r\n      game: (\r\n        <Board\r\n          onGameEnd={onGameEnd}\r\n          numOfPLayers={numOfPlayers}\r\n          userData={userData}\r\n        />\r\n      ),\r\n      reset: <ResetScreen winner={winner} onReset={onReset} />,\r\n    }),\r\n    [winner, numOfPlayers, backButton, nextButton, onGameEnd, userData]\r\n  );\r\n\r\n  const currentScreen = screens[gameState];\r\n  return (\r\n    <>\r\n      <Heading>TypeScript Tic-Tac-Toe</Heading>\r\n      <BoardContainer animate={gameState}>{currentScreen}</BoardContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}