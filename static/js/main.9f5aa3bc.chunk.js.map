{"version":3,"sources":["circle.svg","cross.svg","Cell.tsx","Board.tsx","StartScreen.tsx","ResetScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellWrapper","styled","button","variants","hidden","opacity","transform","visible","Shape","motion","img","attrs","initial","Cell","value","toggle","index","cellValue","animate","src","circle","cross","onClick","BoardWrapper","div","winningConditions","Board","onGameEnd","useState","Array","fill","undefined","cells","setCells","currentShape","filter","cell","length","winningCondition","find","condition","line","map","cellIndex","every","tie","c","winningShape","useEffect","toggleCell","i","console","log","StartButton","StartScreen","onStart","WinnerHeading","h2","ResetButton","ResetScreen","onReset","winner","start","scale","width","height","transition","type","duration","game","reset","BoardContainer","Heading","h1","App","setWinner","gameState","setGameState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f5aa3bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle.bd3ce232.svg\";","export default __webpack_public_path__ + \"static/media/cross.b7a9c534.svg\";","import React, { FC, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { motion } from \"framer-motion\";\r\nimport circle from \"./circle.svg\";\r\nimport cross from \"./cross.svg\";\r\n\r\nconst CellWrapper = styled.button`\r\n  background-color: white;\r\n  border: none;\r\n  box-shadow: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n  position: relative;\r\n`;\r\n\r\nconst variants = {\r\n  hidden: {\r\n    opacity: 0.5,\r\n    transform: \"translate3d(-50%, -50%, 0) scale(0.5)\",\r\n  },\r\n  visible: {\r\n    opacity: 1,\r\n    transform: \"translate3d(-50%, -50%, 0) scale(1)\",\r\n  },\r\n};\r\nconst Shape = styled(motion.img).attrs(() => ({\r\n  initial: \"hidden\",\r\n  variants,\r\n}))`\r\n  height: 60px;\r\n  width: 60px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n`;\r\nexport type CellValue = \"X\" | \"O\" | undefined;\r\n\r\ntype CellProps = {\r\n  value: CellValue;\r\n  toggle(index: number): void;\r\n  index: number;\r\n};\r\n\r\nexport const Cell: FC<CellProps> = ({ value, toggle, index }): ReactElement => {\r\n  const cellValue =\r\n    value === \"O\" ? (\r\n      <Shape animate=\"visible\" src={circle} />\r\n    ) : value === \"X\" ? (\r\n      <Shape animate=\"visible\" src={cross} />\r\n    ) : null;\r\n  return <CellWrapper onClick={() => toggle(index)}>{cellValue}</CellWrapper>;\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Cell, CellValue } from \"./Cell\";\r\nimport styled from \"styled-components\";\r\n\r\nconst BoardWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(3, 1fr);\r\n  gap: 6px;\r\n  background-color: #999;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nexport type Winner = CellValue | \"tie\";\r\n\r\ntype BoardProps = {\r\n  onGameEnd(winner: Winner): void;\r\n};\r\n\r\n//prettier-ignore\r\nconst winningConditions = [\r\n  [0,1,2], [3,4,5], [6,7,8], //Horizontal \r\n  [0,3,6], [1,4,7], [2,5,8],//Vertical\r\n  [0,4,8], [2,4,6] //Diagonal\r\n];\r\n\r\nexport const Board: FC<BoardProps> = ({ onGameEnd }) => {\r\n  const [cells, setCells] = useState<CellValue[]>(Array(9).fill(undefined));\r\n\r\n  const currentShape: CellValue =\r\n    cells.filter((cell) => cell).length % 2 ? \"O\" : \"X\";\r\n\r\n  const winningCondition = winningConditions.find((condition) => {\r\n    const line = condition.map((cellIndex) => cells[cellIndex]);\r\n\r\n    return line[0] && line.every((cellValue) => cellValue === line[0]);\r\n  });\r\n\r\n  const tie = cells.filter((c) => c).length === 9;\r\n\r\n  const winningShape = winningCondition\r\n    ? cells[winningCondition[0]]\r\n    : undefined;\r\n\r\n  useEffect(() => {\r\n    if (winningShape) {\r\n      return onGameEnd(winningShape);\r\n    }\r\n    if (tie) {\r\n      return onGameEnd(\"tie\");\r\n    }\r\n  }, [tie, winningShape, onGameEnd]);\r\n\r\n  const toggleCell = (index: number) => {\r\n    setCells((cells) =>\r\n      cells.map((cell, i) => {\r\n        return i !== index ? cell : cell ? cell : currentShape;\r\n      })\r\n    );\r\n    console.log(winningShape);\r\n  };\r\n\r\n  return (\r\n    <BoardWrapper>\r\n      {cells.map((cell, index: number) => {\r\n        return (\r\n          <Cell key={index} value={cell} index={index} toggle={toggleCell} />\r\n        );\r\n      })}\r\n    </BoardWrapper>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StartButton = styled.button`\r\n  border: none;\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n`;\r\n\r\ntype StartScreenProps = {\r\n  onStart(): void;\r\n};\r\n\r\nexport const StartScreen: FC<StartScreenProps> = ({ onStart }) => {\r\n  return <StartButton onClick={onStart}>Start</StartButton>;\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Winner } from \"./Board\";\r\n\r\ntype ResetScreenProps = {\r\n  onReset(): void;\r\n  winner: Winner;\r\n};\r\n\r\nconst WinnerHeading = styled.h2`\r\n  color: #333;\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst ResetButton = styled.button`\r\n  border: none;\r\n  font-size: 1.5rem;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: #333;\r\n  background: none;\r\n`;\r\n\r\nexport const ResetScreen: FC<ResetScreenProps> = ({ onReset, winner }) => {\r\n  return (\r\n    <>\r\n      <WinnerHeading>\r\n        {winner !== \"tie\" ? `The Winner is ${winner}` : `It's a tie`}\r\n      </WinnerHeading>\r\n      <ResetButton onClick={onReset}>Reset Game</ResetButton>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Board, Winner } from \"./Board\";\nimport styled from \"styled-components\";\nimport { StartScreen } from \"./StartScreen\";\nimport { ResetScreen } from \"./ResetScreen\";\nimport { motion } from \"framer-motion\";\n\nconst variants = {\n  start: {\n    opacity: 1,\n    scale: 1,\n    width: \"200px\",\n    height: \"100px\",\n    transition: {\n      type: \"spring\",\n      duration: \"0.8\",\n    },\n  },\n  hidden: {\n    opacity: 0,\n    scale: 0.8,\n  },\n  game: {\n    width: \"500px\",\n    height: \"500px\",\n    transition: {\n      type: \"spring\",\n      duration: \"0.8\",\n    },\n  },\n  reset: {\n    width: \"300px\",\n    height: \"200px\",\n    transition: {\n      type: \"spring\",\n      duration: \"0.8\",\n    },\n  },\n};\n\nconst BoardContainer = styled(motion.div).attrs(() => ({\n  initial: \"hidden\",\n  variants,\n}))`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  background-color: white;\n  border-radius: 16px;\n  box-shadow: -6px 10px 30px 4px rgba(0, 0, 0, 0.3);\n  border: 15px solid white;\n`;\n\nconst Heading = styled.h1`\n  color: white;\n  text-align: center;\n  margin-bottom: 1rem;\n  text-shadow: -3px 3px #00000066;\n`;\ntype GameState = \"start\" | \"game\" | \"reset\";\n\nfunction App() {\n  const [winner, setWinner] = useState<Winner>();\n  const [gameState, setGameState] = useState<GameState>(\"start\");\n\n  const onGameEnd = (winner: Winner) => {\n    setWinner(winner);\n    setGameState(\"reset\");\n  };\n\n  const onReset = () => {\n    setWinner(undefined);\n    setGameState(\"game\");\n  };\n  return (\n    <>\n      <Heading>TypeScript Tic-Tac-Toe</Heading>\n      <BoardContainer animate={gameState}>\n        {\n          {\n            start: <StartScreen onStart={() => setGameState(\"game\")} />,\n            game: <Board onGameEnd={onGameEnd} />,\n            reset: <ResetScreen winner={winner} onReset={onReset} />,\n          }[gameState]\n        }\n      </BoardContainer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}